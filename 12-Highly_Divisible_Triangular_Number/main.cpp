/*
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

ANSWER : 76576500
*/

#include <iostream>
#include <math.h>
#include <stdint.h>

int main()
{  
   uint64_t num;
   uint64_t temp;
   uint64_t divisors;

   for(uint64_t i = 1; i != 0; i++)
   {
      if((i & 1) == 0)
      {
         temp = (i >> 1);

         if((UINT64_MAX / temp) < (i + 1))
         {
            std::cout << "Product bigger than (2^64 + 1)\n";
            std::cin.get();
         }

         num = (i + 1) * temp;
      }
      else
      {
         temp = ((i + 1) >> 1);
         
         if((UINT64_MAX / temp) < i)
         {
            std::cout << "Product bigger than (2^64 + 1)\n";
            std::cin.get();
         }

         num = i * temp;
      }

      if(num <= 28)
      {
         continue;
      }

      uint64_t lim = std::sqrt(num);
      divisors = 1;// (1 * 2) // 1 and itself 

      for(uint64_t d = 2; d <= lim; d++)
      {
         if((num % d) == 0)
         {
            divisors++;
         }
      }

      divisors = (divisors << 1);

      if((lim * lim) == num)
      {
         divisors--;
      }

      if(divisors > 500)
      {
         std::cout << "ans : " << num << '\n';
         std::cin.get();
      }


      if(i == UINT64_MAX)
      {
         std::cout << "Number bigger than (2^64 - 1)\n";
         std::cin.get();
      }
   }
   
   std::cin.get();
   return 0;
}